###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> CustomGPT4o {\r\n  provider openai\r\n  options {\r\n    model \"gpt-4o\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomGPT4oMini {\r\n  provider openai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gpt-4o-mini\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomSonnet {\r\n  provider anthropic\r\n  options {\r\n    model \"claude-3-5-sonnet-20241022\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n\r\nclient<llm> CustomHaiku {\r\n  provider anthropic\r\n  retry_policy Constant\r\n  options {\r\n    model \"claude-3-haiku-20240307\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\r\nclient<llm> CustomFast {\r\n  provider round-robin\r\n  options {\r\n    // This will alternate between the two clients\r\n    strategy [CustomGPT4oMini, CustomHaiku]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\r\nclient<llm> OpenaiFallback {\r\n  provider fallback\r\n  options {\r\n    // This will try the clients in order until one succeeds\r\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/retry\r\nretry_policy Constant {\r\n  max_retries 3\r\n  // Strategy is optional\r\n  strategy {\r\n    type constant_delay\r\n    delay_ms 200\r\n  }\r\n}\r\n\r\nretry_policy Exponential {\r\n  max_retries 2\r\n  // Strategy is optional\r\n  strategy {\r\n    type exponential_backoff\r\n    delay_ms 300\r\n    mutliplier 1.5\r\n    max_delay_ms 10000\r\n  }\r\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.74.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "tasks.baml": "client<llm> GemniClient {\r\n  provider google-ai\r\n  options {\r\n    model \"gemini-1.5-flash\"\r\n    api_key env.GOOGLE_API_KEY\r\n    generationConfig {\r\n      temperature 0.5\r\n    }\r\n  }\r\n}\r\n\r\nclass Tasks {\r\n  task_id int @description(\"A unique identifier for the task, used to reference it in dependencies and reports.\")\r\n  name string @description(\"A concise overview of the task.\")\r\n  complexity int @assert(in_range, {{ this >= 1 and this <= 10 }}) @description(\"Estimated complexity of the task on a scale from 1 (easiest) to 10 (most complex).\")\r\n  estimated_hours float @description(\"Realistic time estimate in hours to complete the task.\")\r\n  required_skills Skills[] @description(\"An array of skills required to complete the task.\")\r\n  depends_on int[] @description(\"List of prerequisite task IDs that must be completed before this task can begin.\")\r\n}\r\n\r\nclass Skills {\r\n  name string @description(\"The name of the skill.\")\r\n  category string @description(\"The category or domain of the skill.\")\r\n  preferred_experience float @assert(in_range, {{ this >= 0 and this <= 10 }}) @description(\"Preferred years of experience for this skill (0 to 10 years).\")\r\n  required_proficiency int @assert(in_range, {{ this >= 1 and this <= 10 }}) @description(\"Required proficiency level for this skill on a scale of 1 (novice) to 10 (expert).\")\r\n}\r\n\r\nfunction GenerateRoadmap(raw_text: string) -> Tasks[] {\r\n  client GemniClient\r\n  prompt #\"\r\n    Generate a comprehensive and detailed roadmap of tasks to build the following project:\r\n    ---\r\n    {{raw_text}}\r\n    ---\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}",
}

def get_baml_files():
    return file_map